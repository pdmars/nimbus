# You must tie a specific bridge to an IP range.  When a request for a VM with
# specific IP addresses comes in, each IP (each virtual NIC) will be matched to
# a bridge.  When the VM is booted, each NIC will be bridged to the appropriate
# bridge.
#
# If the program cannot find a match, it can use a default setting.  You can
# have no default, that will cause the program to fail if no match can be found
# from the 'bridges' section.

[defaultbridge]

# The name of the bridge to use for every VM NIC without a match in the
# "bridges" section below.  If blank or missing, there will be no default.

default: xenbr0


[bridges]

# Add bridge names as configuration keys with values of the valid IP ranges.
# If you don't like the /bitmask subnet syntax, you can use ranges but they 
# must be valid subnet ranges, e.g., 192.168.0.0-192.168.0.255
#
# BRIDGENAME-TO-PICK: SUBNET-OF-VM-NIC
#
# Examples:
#    virbr2: 140.221.0.0/16

#    virbr3: 192.168.0.0/24
#    virbr4: 192.168.1.0/24
#    virbr5: 192.168.2.0/24, 10.10.2.0/24
#    virbr6: 192.168.3.0/24, 10.55.2.0/24, 10.77.2.0/24

#    xenbr0: 192.168.0.0-192.168.0.255
#    virbr8: 172.16.0.0-172.31.255.255


[dhcp-bridges]

# After a bridge is chosen for the VM's NIC, the program needs to know how to
# let packets through to DHCPd (normally network packets without an IP source
# address would be rejected).
#
# Directing the request to a specific interface only also helps prevent DHCP
# requests from being broadcast to other VMs or the real network.

# The DHPCd process will be listening for requests on a particular interface
# in domain 0.  This will be something like "eth0" usually for Xen.  This
# interface is connected to the guests with something called "vif0.0" usually.
#
# This diagram may help explain: http://tinyurl.com/36n9twq (xensource.com)
# 
# This dom0 interface needs to be bridged to the same bridge that a VM NIC
# is bridged to.  The configurations in this section ("dhcp-bridges") allow
# the program to lookup which bridge a VM NIC is bridged to and get the
# matching DHCPd interface so that security rules can be constructed properly.
#
# The bridgename for the VM NIC is chosen using the configurations in the
# "[defaultbridge]" and "[bridges]" section above.  These configurations are
# where you map it to the domain 0 DHCPd interface to send packets to.
#
# Try this command to see what the network setup is like: "brctl show"
#
# Sample output:
#
# bridge name     bridge id               STP enabled     interfaces
# xenbr0          8000.feffffffffff       no              peth0
#                                                        vif0.0
#
#
# This is telling me that "vif0.0" is bridged to the real physical NIC
# "peth0"  In Xen the "vif0*" interfaces are the representation of domain 0
# interfaces.  So here, DHCPd is listening on my "eth0" which is represented
# as "vif0.0".  So when "vif1.0" shows up on this bridge when the guest VM
# starts, "vif0.0" is the place I want DHCP packets to go.

# This all usually makes sense once you remember that domain 0 is also a VM.
# When you run "ifconfig" in domain 0 it is confusing since you are seeing
# the "eth0" interface which is "inside" the guest VM (domain 0 is a guest
# VM) as well as "vif0.0" which is how guest packets arrive to be dealt
# with (using iptables, ebtables, bridging, etc.) before hitting the real
# LAN via "peth0"
# 
#
#
# BRIDGENAME-CHOSEN-FOR-VM: DHCPD-LISTENING-INTERFACE

xenbr0: vif0.0


# Also note that for each network DHPCd will serve, a "subnet" configuration
# will be required in dhcpd.conf. See share/workspace-control/dhcpd.conf.example

[dhcp]

# This is called via sudo to adjust DHCP configurations for VMs.
#
# It is called under sudo.  A relevant entry for it must be configured in the
# sudoers file, see the "sudo.conf" file.
#
# Because it is called under sudo, the program, these conf files, and all
# enclosing directories should be owned by root.
#
# If this setting is a relative path, it will be resolved from the
# workspace-control specific libexec directory (see "dirs.conf")

dhcpconfig: dhcp-config.sh


[netsecurity]

# ebtables is called via sudo to adjust bridging policies for VMs.
#
# It is called under sudo.  A relevant entry for it must be configured in the
# sudoers file, see the "sudo.conf" file.
#
# Because it is called under sudo, the program, these conf files, and all
# enclosing directories should be owned by root.
#
# Note "xen-ebtables-config.sh" vs. "kvm-ebtables-config.sh"
#
# If this setting is a relative path, it will be resolved from the
# workspace-control specific libexec directory (see "dirs.conf")

ebtablesconfig: xen-ebtables-config.sh

