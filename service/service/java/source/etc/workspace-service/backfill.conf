################################################################################
#
# This file is used for configuring VM backfill deployment on idle VMM nodes.
#
# The intent of backfill is to provide a Nimbus cloud with the ability to
# deploy a generic VM on idle nodes. Such a VM could be configured with a
# service like Condor, allowing the VM to contribute cycles to some other
# purpose instead of wasting cycles on idle cloud nodes. When a user request is
# recieved the VM is terminated immediately and the user VM is deployed.
#
# NOTE: Backfill must be configured and run by the Nimbus administrator. It is
#       not currently a feature that users can leverage directly.
#
#       The VM used by backfill (and the services inside of it) must be able to
#       handle a hard shutdown. A hard shutdown is used to minimize the turn-
#       around time for responding to user requests.
#
################################################################################


# BACKFILL
#
# If you would like to use backfill, you can enable it here.
#
# The default is disabled.

backfill.disabled=true


# MAX INSTANCES
#
# Max instances is the maximum number of VM instances that backfill will deploy
# if it is enabled. If there is not enough space on the cloud for the maximum
# number of instances it will deploy as many as it can. For example, if max
# instances is set to 12 on a 16 node cloud but there are 10 active user VMs
# then backfill will still launch 6 backfill nodes.
#
# If max instances is set to 0 then backfill will use all idle VMMs.
#
# The default is 0.

max.instances=0


# DISK IMAGE
#
# The disk image is currently a pointer to the image file on the VMM nodes.
# The image must be in the same location on all nodes. Also, the image must
# be copied there manually.

disk.image=/usr/local/myawesomeimage.img


# INSTANCE MEMORY
#
# The instance memory is the amount of memory (in MB) that the backfill image
# will use.

memory.MB=64


# INSTANCE DURATION
#
# Instance duration is the amount of time (in seconds) that the backfill instance
# will potentially be active. Obviously, the nature of backfill instances
# necessitates that when a user request arrives the backfill instance will be
# preempted, regardless of this setting. When the duration has elapsed the
# instance will be terminated. It is possible that another backfill instance
# will be dispatched almost immediately after the previous one was terminated.
#
# The default duration is one week.

duration.seconds=604800


# INSTANCE TERMINATION POLICY
#
# The instance termination policy specifies the mechanism that will be used
# when selecting a backfill VM to terminate in order to satisfy a user
# request.
#
# Options:
#
# - ANY             this will pick any VM to terminate, it doesn't consider
#                   any factors (such as time running) when deciding, it
#                   simply grabs the next VM instance out of the hash table
#
# - MOST_RECENT     this will pick the VM that has been running for the least
#                   amount of time
#
# The default is MOST_RECENT.

termination.policy=MOST_RECENT


# INSTANCE RETRY PERIOD
#
# Instance retry period is the amount of time (in seconds) the backfill timer
# waits in between attempts to launch backfill VMs on available cloud nodes.
# This timer is restarted (and hence, it attempts to launch backfill VMs)
# whenever a user VM is terminated (thus freeing a node for backfill).
#
# The default is five minutes.

retry.period=300


# NETWORK
#
# Set the network to public or private.

network=public