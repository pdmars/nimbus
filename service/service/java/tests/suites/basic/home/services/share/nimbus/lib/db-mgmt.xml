<?xml version="1.0"?>

<project default="dbprobe"
         basedir="."
         name="Workspace Service DB build/management">

    <description>Workspace Service DB build/management
    
        Must be called with these properties set:

        workspace.dbdir.prop      - toplevel dir to create under
        workspace.sqldir.prop     - dir with SQL database definition files
        workspace.notifdir.prop   - dir with source of notification executables
        derby.system.home.prop    - derby home dir to call IJ with
        derby.relative.dir.prop   - relative path from homedir where our dir is
        derby.classpath.dir.prop  - path to dir with derby jars
        pwGen.path.prop           - path to password generation comd
    </description>

    <property file="../workspace.persistence.conf" />

    <path id="derby.classpath">
        <fileset dir="${derby.classpath.dir.prop}">
             <include name="*.jar"/>
        </fileset>
    </path>

    
    <!-- ***********************************************************************
         DEFAULT SETUP TARGET
         ******************************************************************* -->

    <target name="setupWorkspacePersistence">

        <echo>Setting up Workspace Service persistence:</echo>
        <antcall target="createDerbyDB" />
        <antcall target="createAccountingDB" />
        <echo>Set up Workspace Service persistence.</echo>

    </target>

    
    <!-- ***********************************************************************
         WIPE ALL STATE
         ******************************************************************* -->

    <target name="deleteAllPersistentData">
        <fail message="Must specify 'workspace.dbdir.prop' to delete"
              unless="workspace.dbdir.prop"/>
        <echo message="Deleting everything persisted under ${workspace.dbdir.prop}"/>
        <delete dir="${workspace.dbdir.prop}" />
    </target>
    
    
    <!-- ***********************************************************************
         PERSISTENCE DATABASE FOR CONFIGURATION AND RUNNING WORKSPACES
         ******************************************************************* -->

    <target name="createDerbyDB"
            depends="allparamscheck, Main DB action"
            unless="mainDB.present">

        <antcall target="make.persistence.dir" />

        <java classname="org.apache.derby.tools.ij" fork="true">
            <jvmarg value="-Dderby.system.home=${derby.system.home.prop}"/>
            <jvmarg value="-Dderby.infolog.append=true"/>
            <jvmarg value="-Dij.protocol=jdbc:derby:directory:${derby.system.home.prop}/"/>
            <jvmarg value="-Dij.database=${derby.relative.dir.prop}/WorkspacePersistenceDB;create=true;user=nimbus;password=${derby.user.pass}"/>
            <classpath refid="derby.classpath" />
            <arg value="${workspace.sqldir.prop}/workspace_service_derby_schema.sql"/>
        </java>
    </target>
    
    <target name="Main DB action" depends="dbprobe">
        <echo message="${mainDB.msg}"/>
    </target>

    <!-- resetDB is a convenience target in place so that
         the entire service does need to be redeployed to
         wipe the database.
         -->
    <target name="resetDB">
        <antcall target="deleteDerbyDB"/>
        <antcall target="createDerbyDB"/>
    </target>

    <target name="deleteDB" depends="deleteDerbyDB" />
    <target name="dumpDB" depends="dumpDerbyDB" />

    <target name="deleteDerbyDB">
        <fail message="Must specify 'workspace.dbdir.prop' to delete"
              unless="workspace.dbdir.prop"/>
        <echo message="Deleting Derby database for the Workspace Service"/>
        <delete dir="${workspace.dbdir.prop}/WorkspacePersistenceDB"/>
        
        <!-- consistency of these things are tied to the service DB so they
             also need a reset -->
        <echo message="Deleting disk-caches for the Workspace Service"/>
        <delete dir="${workspace.dbdir.prop}/caches" />
        <delete file="${workspace.dbdir.prop}/elastic.db" />
        <echo message="Deleting notification msgs for the Workspace Service"/>
        <delete dir="${workspace.dbdir.prop}/msg-sinks" />
    </target>

    <target name="dumpDerbyDB" depends="allparamscheck" >
        <echo message="Dumping Derby database to stdout"/>
        <java classname="org.apache.derby.tools.ij" fork="true" >
            <jvmarg value="-Dderby.system.home=${derby.system.home.prop}"/>
            <jvmarg value="-Dderby.infolog.append=true"/>
            <jvmarg value="-Dij.protocol=jdbc:derby:directory:${derby.system.home.prop}/"/>
            <jvmarg value="-Dij.database=${derby.relative.dir.prop}/WorkspacePersistenceDB;create=false;user=nimbus;password=${derby.user.pass}"/>
            <classpath refid="derby.classpath" />
            <arg value="${workspace.sqldir.prop}/workspace_service_derby_dump.sql"/>
        </java>
    </target>

    
    <!-- ***********************************************************************
         ACCOUNTING DATABASE
         ******************************************************************* -->
    
    <!-- separate database for long term accounting, even over workspace
         service version changes or configuration resets -->

    <target name="createAccountingDB"
            depends="allparamscheck, Accounting DB action"
            unless="accountingDB.present">

        <antcall target="make.persistence.dir" />

        <java classname="org.apache.derby.tools.ij" fork="true" >
            <jvmarg value="-Dderby.system.home.prop=${derby.system.home.prop}"/>
            <jvmarg value="-Dderby.infolog.append=true"/>
            <jvmarg value="-Dij.protocol=jdbc:derby:directory:${derby.system.home.prop}/"/>
            <jvmarg value="-Dij.database=${derby.relative.dir.prop}/WorkspaceAccountingDB;create=true;user=nimbus;password=${derby.user.pass}"/>
            <classpath refid="derby.classpath" />
            <arg value="${workspace.sqldir.prop}/workspace_service_derby_accounting_schema.sql"/>
        </java>
    </target>

    <target name="Accounting DB action" depends="dbprobe">
        <echo message="${accountingDB.msg}"/>
    </target>

    <!-- resetAccountingDB is a convenience target in place so that
         the entire service does need to be redeployed to
         wipe the database. -->

    <target name="resetAccountingDB">
        <antcall target="deleteAccountingDB"/>
        <antcall target="createAccountingDB"/>
    </target>

    <target name="deleteAccountingDB">
        <fail message="Must specify 'workspace.dbdir.prop' to delete"
              unless="workspace.dbdir.prop"/>
        <echo message="Deleting database for workspace accounting module"/>
        <delete dir="${workspace.dbdir.prop}/WorkspaceAccountingDB"/>
    </target>

    <target name="dumpAccountingDB" depends="allparamscheck" >
        <echo message="Dumping accounting database to stdout"/>
        <java classname="org.apache.derby.tools.ij" fork="true" >
            <jvmarg value="-Dderby.system.home.prop=${derby.system.home.prop}"/>
            <jvmarg value="-Dderby.infolog.append=true"/>
            <jvmarg value="-Dij.protocol=jdbc:derby:directory:${derby.system.home.prop}/"/>
            <jvmarg value="-Dij.database=${derby.relative.dir.prop}/WorkspaceAccountingDB;create=false;user=nimbus;password=${derby.user.pass}"/>
            <classpath refid="derby.classpath" />
            <arg value="${workspace.sqldir.prop}/workspace_service_derby_accounting_dump.sql"/>
        </java>
    </target>


    <!-- ***********************************************************************
         "SUBROUTINES"
         ******************************************************************* -->

    <target name="assureDerbyProps"
            depends="checkDerbyProps, createDerbyProps, readDerbyProps" />
    <target name="checkDerbyProps">
        <available file="${derby.system.home.prop}/derby.properties"
                   property="derbyProps.exist"/>
        <antcall target="createDerbyProps"/>
        <antcall target="readDerbyProps"/>
    </target>

    <target name="readDerbyProps" if="derbyProps.exist">
        <loadproperties srcfile="${derby.system.home.prop}/derby.properties">
            <filterchain>
                <linecontains>
                    <contains value="derby.user.nimbus"/>
                </linecontains>
            </filterchain>
        </loadproperties>
        <property name="derby.user.pass" value="${derby.user.nimbus}" />
    </target>

    <target name="createDerbyProps" unless="derbyProps.exist">

        <fail message="must specify 'pwGen.path.prop' (path to password generation command)"
              unless="pwGen.path.prop"/>
              
        <antcall target="make.persistence.dir" />

        <exec executable="${pwGen.path.prop}" outputproperty="derby.user.pass"/>
        <exec executable="${pwGen.path.prop}" outputproperty="derby.guest.pass"/>

        <propertyfile file="${derby.system.home.prop}/derby.properties"
                      comment="Generated by db-mgmt.xml script">
            <entry key="derby.user.nimbus" value="${derby.user.pass}"/>
            <entry key="derby.user.guest" value="${derby.guest.pass}"/>

            <entry key="derby.authentication.provider" value="BUILTIN"/>
            <entry key="derby.connection.requireAuthentication" value="true"/>
            <entry key="derby.database.propertiesOnly" value="true"/>
            <entry key="derby.database.defaultConnectionMode" value="noAccess"/>
            <entry key="derby.database.fullAccessUsers" value="nimbus"/>
            <entry key="derby.database.readOnlyAccessUsers" value="guest"/>

            <entry key="derby.drda.startNetworkServer" value="false"/>
            <entry key="derby.drda.keepAlive" value="true"/>
            <entry key="derby.drda.securityMechanism"
                   value="STRONG_PASSWORD_SUBSTITUTE_SECURITY"/>

        </propertyfile>

        <chmod file="${derby.system.home.prop}/derby.properties" perm="600" />

    </target>


    <target name="allparamscheck" depends="assureDerbyProps">

        <fail message="Must specify 'workspace.dbdir.prop' for this"
              unless="workspace.dbdir.prop"/>

        <fail message="Must specify 'workspace.sqldir.prop' for this"
              unless="workspace.sqldir.prop"/>

        <fail message="Must specify 'workspace.notifdir.prop' for this"
              unless="workspace.notifdir.prop"/>

        <fail message="Must specify 'derby.system.home.prop' for this"
              unless="derby.system.home.prop"/>

        <fail message="Must specify 'derby.relative.dir.prop' for this"
              unless="derby.relative.dir.prop"/>

        <fail message="Must specify 'derby.classpath.dir.prop' for this"
              unless="derby.classpath.dir.prop"/>

        <fail message="Must specify 'derby.user.pass' for this"
              unless="derby.user.pass"/>
        
    </target>

    <target name="make.persistence.dir">

        <fail message="Must specify 'workspace.notifdir.prop' to make persistence directory"
              unless="workspace.dbdir.prop"/>

        <fail message="Must specify 'workspace.notifdir.prop' to make persistence directory"
              unless="workspace.notifdir.prop"/>

        <mkdir dir="${workspace.dbdir.prop}" />

        <mkdir dir="${workspace.dbdir.prop}/pilot-logs" />
        
        <mkdir dir="${workspace.dbdir.prop}/caches" />

        <mkdir dir="${workspace.dbdir.prop}/tmpfiles" />

        <mkdir dir="${workspace.dbdir.prop}/msg-sinks" />

        <!-- chmod ant target does not work on directories... -->
        <exec executable="chmod">
            <arg value="700"/>
            <arg value="${workspace.dbdir.prop}"/>
        </exec>
        
        <echo message="Ensured owner-only rwx permissions on persistence directory"/>

        <copy file="${workspace.notifdir.prop}/notifications"
              tofile="${workspace.dbdir.prop}/msg-sinks/notifications"/>

        <chmod file="${workspace.dbdir.prop}/msg-sinks/notifications"
               perm="500"/>

        <copy file="${workspace.notifdir.prop}/pilotnotifications"
              tofile="${workspace.dbdir.prop}/msg-sinks/pilotnotifications"/>

        <chmod file="${workspace.dbdir.prop}/msg-sinks/pilotnotifications"
               perm="500"/>

    </target>

    <target name="dbprobe">

        <fail message="Must specify 'workspace.dbdir.prop' to probe for databases"
              unless="workspace.dbdir.prop"/>

        <available file="${workspace.dbdir.prop}/WorkspacePersistenceDB"
                   type="dir"
                   property="mainDB.present" />

        <available file="${workspace.dbdir.prop}/WorkspaceAccountingDB"
                   type="dir"
                   property="accountingDB.present" />

        <condition property="mainDB.msg"
                   value="Creating an embedded database for the Workspace Service">
            <not>
                <isset property="mainDB.present" />
            </not>
        </condition>

        <condition property="mainDB.msg"
                   value="DB already present: not creating an embedded database for the workspace service">
            <isset property="mainDB.present" />
        </condition>

        <condition property="accountingDB.msg"
                   value="Creating an embedded database for workspace service accounting">
            <not>
                <isset property="accountingDB.present" />
            </not>
        </condition>

        <condition property="accountingDB.msg"
                   value="DB already present: not creating an embedded database for workspace accounting module">
            <isset property="accountingDB.present" />
        </condition>
    </target>
    
    
</project>
